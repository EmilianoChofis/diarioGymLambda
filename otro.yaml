AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  MovierBack

  Sample SAM Template for MovierBack2

Globals:
  Function:
    Timeout: 10
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'*'"
      AllowMethods: "'GET,PUT,POST,PATCH,DELETE,OPTIONS'"

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaBasicExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
        - PolicyName: CognitoAdminInitiateAuth
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminRespondToAuthChallenge
                  - cognito-idp:AdminSetUserPassword
                  - cognito-idp:AdminCreateUser
                  - cognito-idp:AdminDeleteUser
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminRemoveUserFromGroup
                  - cognito-idp:AdminGetUser
                  - cognito-idp:AdminGetUserAttributeVerificationCode
                  - cognito-idp:AdminConfirmSignUp
                  - cognito-idp:AdminForgetDevice
                  - cognito-idp:AdminConfirmDevice
                  - cognito-idp:AdminUpdateDeviceStatus
                  - cognito-idp:AdminEnableUser
                  - cognito-idp:AdminDisableUser
                  - cognito-idp:AdminResetUserPassword
                  - cognito-idp:AdminSetUserSettings
                  - cognito-idp:AdminUpdateAuthEventFeedback
                  - cognito-idp:AdminUserGlobalSignOut
                Resource: "arn:aws:cognito-idp:us-east-1::"
        - PolicyName: SSMGetParameter
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: "arn:aws:secretsmanager:us-east-1:533267376951:secret:prd/dataBase/appMovier-123456"
  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Name: AuthApi

  MovieApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: MovieApi
      StageName: Prod

  CommentApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: CommentApi
      StageName: Prod

  WatchedApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: WatchedApi
      StageName: Prod

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/login_users/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /login
            Method: post

  SetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/set_password/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /set_password
            Method: post

  CreateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: login/insert_user_pool/
      Handler: app.lambda_handler
      Runtime: python3.12
      Role: !GetAtt LambdaExecutionRole.Arn
      Architectures:
        - x86_64
      Events:
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /create_user
            Method: post

  CreateMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/create_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        CreateMovie:
          Type: Api
          Properties:
            Path: /create
            RestApiId: !Ref MovieApi
            Method: post

  GetMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/get_movies/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /getAll
            RestApiId: !Ref MovieApi
            Method: get

  GetAllMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/get_all_movies/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /getAllMovies
            RestApiId: !Ref MovieApi
            Method: get

  GetMovieByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/get_movie_by_id/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /getMovie/{id}/{user_id}
            RestApiId: !Ref MovieApi
            Method: get

  SearchMoviesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/search_movies/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetMovie:
          Type: Api
          Properties:
            Path: /searchMovies/{name}
            RestApiId: !Ref MovieApi
            Method: get

  UpdateMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/update_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        UpdateMovie:
          Type: Api
          Properties:
            Path: /update/{id}
            RestApiId: !Ref MovieApi
            Method: put

  ChangeStatusMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: movies/change_status_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetComments:
          Type: Api
          Properties:
            Path: /status/{id}
            RestApiId: !Ref MovieApi
            Method: patch

  CreateCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comments/create_comment/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        CreateComment:
          Type: Api
          Properties:
            Path: /create
            RestApiId: !Ref CommentApi
            Method: post

  GetCommentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comments/get_comments/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        GetComments:
          Type: Api
          Properties:
            Path: /getComment/{id}
            RestApiId: !Ref CommentApi
            Method: get

  DeleteCommentFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: comments/delete_comment/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        DisableMovie:
          Type: Api
          Properties:
            Path: /delete
            RestApiId: !Ref CommentApi
            Method: delete

  WatchedMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: watched/watched_movie/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        WatchedMovie:
          Type: Api
          Properties:
            Path: /watched
            RestApiId: !Ref WatchedApi
            Method: post

  GetWatchedMovieFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: watched/get_watched_movies_user/
      Handler: app.lambda_handler
      Runtime: python3.12
      Architectures:
        - x86_64
      Events:
        WatchedMovie:
          Type: Api
          Properties:
            Path: /watched/user/{id}
            RestApiId: !Ref WatchedApi
            Method: get

