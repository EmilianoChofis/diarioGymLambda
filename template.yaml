AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: |
  gymDiarioLambda
  Sample SAM Template for gymDiarioLambda

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 120
    MemorySize: 256
    Runtime: python3.12

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: SecretsManagerReadWrite
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: '*'
        - PolicyName: CognitoAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminListGroupsForUser
                  - cognito-idp:AdminGetUser
                  - cognito-idp:ListUsers
                  - cognito-idp:AdminInitiateAuth
                  - cognito-idp:AdminAddUserToGroup
                  - cognito-idp:AdminCreateUser
                Resource: !GetAtt UserPool.Arn

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable MySQL access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0

  MyDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: MyDBCredentials
      Description: RDS MySQL credentials
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  RelationalDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      DBName: Chomfit
      Engine: mysql
      EngineVersion: 8.0.35
      MasterUsername: !Join
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref MyDBSecret
          - ':SecretString:username}}'
      MasterUserPassword: !Join
        - ''
        - - '{{resolve:secretsmanager:'
          - !Ref MyDBSecret
          - ':SecretString:password}}'
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AliasAttributes:
        - email
        - preferred_username
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      MfaConfiguration: 'OFF'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  MyUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-client
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Admin
      UserPoolId: !Ref UserPool
      Description: Grupo de administradores con permisos

  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: User
      UserPoolId: !Ref UserPool
      Description: usuario regular

  CouchGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: Couch
      UserPoolId: !Ref UserPool
      Description: Entrenadores

  UserApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: UserApi
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'POST,GET,OPTIONS,DELETE,PUT,PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'www.example.com'"
        MaxAge: "'600'"
        AllowCredentials: true

  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: AuthApi
      StageName: Prod
      Cors:
        AllowMethods: "'POST,GET,OPTIONS,DELETE,PUT,PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
        AllowCredentials: false

  TeamApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: TeamApi
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'POST,GET,OPTIONS,DELETE,PUT,PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'www.example.com'"
        MaxAge: "'600'"
        AllowCredentials: true

  RoutineApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: RoutineApi
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
        AllowMethods: "'POST,GET,OPTIONS,DELETE,PUT,PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'www.example.com'"
        MaxAge: "'600'"
        AllowCredentials: true

  ExercisesApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ExercisesApi
      StageName: Prod
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Cors:
          AllowMethods: "'POST,GET,OPTIONS,DELETE,PUT,PATCH'"
          AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          AllowOrigin: "'www.example.com'"
          MaxAge: "'600'"
          AllowCredentials: true

  GetAllUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/getAllUsers/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /get_all_users
            Method: get
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret
          CLIENT_ID: !GetAtt MyUserPoolClient.ClientId
          USER_POOL_ID: !Ref UserPool

  GetUserByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/getUserById/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /get_user_by_id
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  UpdateUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/updateUserData/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateUserData:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /update_user
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  DisableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/disableUser/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        DisableUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /disable_user
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  EnableUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/enableUser/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        EnableUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /enable_user
            Method: patch
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  RegisterUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: users/registerUser/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterUser:
          Type: Api
          Properties:
            RestApiId: !Ref UserApi
            Path: /register_user
            Method: post
            Auth:
              Authorizer: CognitoAuthorizer
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret
          CLIENT_ID: !GetAtt MyUserPoolClient.ClientId
          USER_POOL_ID: !Ref UserPool

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/login/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /login
            Method: post
      Environment:
        Variables:
          CLIENT_ID: !GetAtt MyUserPoolClient.ClientId
          POOL_ID: !Ref UserPool

  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/register/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Register:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /register
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret
          CLIENT_ID: !GetAtt MyUserPoolClient.ClientId
          USER_POOL_ID: !Ref UserPool

  SetPasswordFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/set_password/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        SetPassword:
          Type: Api
          Properties:
            RestApiId: !Ref AuthApi
            Path: /set-password
            Method: patch
      Environment:
        Variables:
          CLIENT_ID: !GetAtt MyUserPoolClient.ClientId
          USER_POOL_ID: !Ref UserPool

  FindAllExercisesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: exercises/find_all/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        FindAllExercises:
          Type: Api
          Properties:
            RestApiId: !Ref ExercisesApi
            Path: /find_all_exercises
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  RegisterExerciseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: exercises/register/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterExercise:
          Type: Api
          Properties:
            RestApiId: !Ref ExercisesApi
            Path: /register_exercise
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  UpdateExerciseFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: exercises/update/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        UpdateExercise:
          Type: Api
          Properties:
            RestApiId: !Ref ExercisesApi
            Path: /update_exercise
            Method: patch
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  RegisterTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/register/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterTeam:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /register_team
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  FindAllTeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/findAll/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        FindAllTeams:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /find_all_teams
            Method: get
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  FindByIdTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/findById/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        FindByIdTeam:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /find_by_id
            Method: post
      Environment:
        Variables:
            DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
            DB_NAME: Chomfit
            SECRET_NAME: !Ref MyDBSecret

  AcceptUserTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/accept_users/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        AcceptUserTeam:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /accept_user
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  RemoveUserTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/remove_user/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RemoveUserTeam:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /remove_user
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  LeaveTeamFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/leave_team/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        LeaveTeam:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /leave_team
            Method: delete
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  FindTeamByCouchUidFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: teams/findByCouchUid/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        FindTeamByCouchUid:
          Type: Api
          Properties:
            RestApiId: !Ref TeamApi
            Path: /find_by_couch_uid
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  RegisterRoutineFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: routines/register/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterRoutine:
          Type: Api
          Properties:
            RestApiId: !Ref RoutineApi
            Path: /register_routine
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  FindAllRoutinesByCouchFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: routines/findAllByCouch/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        FindAllRoutinesByCouch:
          Type: Api
          Properties:
            RestApiId: !Ref RoutineApi
            Path: /find_all_routines_by_couch
            Method: post
      Environment:
        Variables:
          DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
          DB_NAME: Chomfit
          SECRET_NAME: !Ref MyDBSecret

  RegisterFeedbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: routines/feedback/
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        RegisterFeedback:
          Type: Api
          Properties:
            RestApiId: !Ref RoutineApi
            Path: /register_feedback
            Method: post
      Environment:
          Variables:
              DB_HOST: !GetAtt RelationalDatabase.Endpoint.Address
              DB_NAME: Chomfit
              SECRET_NAME: !Ref MyDBSecret

Outputs:
  GetUserByIdApiUrl:
    Description: API Gateway endpoint URL with path get_user_by_id
    Value: !Sub https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/get_user_by_id
  GetUserByIdFunctionArn:
    Description: Get data user Lambda Function ARN
    Value: !GetAtt GetUserByIdFunction.Arn
  UpdateUserDataApiUrl:
    Description: API Gateway endpoint URL with path update_user
    Value: !Sub https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_user
  UpdateUserDataFunctionArn:
    Description: Update user data Lambda Function ARN
    Value: !GetAtt UpdateUserDataFunction.Arn
  DisableUserApiUrl:
    Description: API Gateway endpoint URL with path disable_user
    Value: !Sub https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/disable_user
  DisableUserFunctionArn:
    Description: Disable user Lambda Function ARN
    Value: !GetAtt DisableUserFunction.Arn
  EnableUserApiUrl:
    Description: API Gateway endpoint URL with path enable_user
    Value: !Sub https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/enable_user
  EnableUserFunctionArn:
    Description: Enable user Lambda Function ARN
    Value: !GetAtt EnableUserFunction.Arn
  RegisterUserApiUrl:
    Description: API Gateway endpoint URL with path register_user
    Value: !Sub https://${UserApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register_user
  RegisterUserFunctionArn:
    Description: Register user Lambda Function ARN
    Value: !GetAtt RegisterUserFunction.Arn
  LoginApiUrl:
    Description: API Gateway endpoint URL with path login
    Value: !Sub https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login
  LoginFunctionArn:
    Description: Login Lambda Function ARN
    Value: !GetAtt LoginFunction.Arn
  RegisterApiUrl:
    Description: API Gateway endpoint URL with path register
    Value: !Sub https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register
  RegisterFunctionArn:
    Description: Register Lambda Function ARN
    Value: !GetAtt RegisterFunction.Arn
  FindAllExercisesApiUrl:
    Description: API Gateway endpoint URL with path find_all_exercises
    Value: !Sub https://${ExercisesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/find_all_exercises
  FindAllExercisesFunctionArn:
    Description: Find all exercises Lambda Function ARN
    Value: !GetAtt FindAllExercisesFunction.Arn
  RegisterExerciseApiUrl:
    Description: API Gateway endpoint URL with path register_exercise
    Value: !Sub https://${ExercisesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register_exercise
  RegisterExerciseFunctionArn:
    Description: Register exercise Lambda Function ARN
    Value: !GetAtt RegisterExerciseFunction.Arn
  UpdateExerciseApiUrl:
    Description: API Gateway endpoint URL with path update_exercise
    Value: !Sub https://${ExercisesApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/update_exercise
  UpdateExerciseFunctionArn:
    Description: Update exercise Lambda Function ARN
    Value: !GetAtt UpdateExerciseFunction.Arn
  RegisterTeamApiUrl:
    Description: API Gateway endpoint URL with path register_team
    Value: !Sub https://${TeamApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register_team
  RegisterTeamFunctionArn:
    Description: Register team Lambda Function ARN
    Value: !GetAtt RegisterTeamFunction.Arn
  FindAllTeamsApiUrl:
      Description: API Gateway endpoint URL with path find_all_teams
      Value: !Sub https://${TeamApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/find_all_teams
  FindAllTeamsFunctionArn:
    Description: Find all teams Lambda Function ARN
    Value: !GetAtt FindAllTeamsFunction.Arn
  FindByIdTeamApiUrl:
    Description: API Gateway endpoint URL with path find_by_id
    Value: !Sub https://${TeamApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/find_by_id
  FindByIdTeamFunctionArn:
    Description: Find by id team Lambda Function ARN
    Value: !GetAtt FindByIdTeamFunction.Arn
  AcceptUserTeamApiUrl:
    Description: API Gateway endpoint URL with path accept_user
    Value: !Sub https://${TeamApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/accept_user
  AcceptUserTeamFunctionArn:
    Description: Accept user to team Lambda Function ARN
    Value: !GetAtt AcceptUserTeamFunction.Arn
  RemoveUserTeamApiUrl:
    Description: API Gateway endpoint URL with path remove_user
    Value: !Sub https://${TeamApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/remove_user
  RemoveUserTeamFunctionArn:
    Description: Remove user from team Lambda Function ARN
    Value: !GetAtt RemoveUserTeamFunction.Arn
  LeaveTeamApiUrl:
    Description: API Gateway endpoint URL with path leave_team
    Value: !Sub https://${TeamApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/leave_team
  LeaveTeamFunctionArn:
    Description: Leave team Lambda Function ARN
    Value: !GetAtt LeaveTeamFunction.Arn
  FindTeamByCouchUidApiUrl:
    Description: API Gateway endpoint URL with path find_by_couch_uid
    Value: !Sub https://${TeamApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/find_by_couch_uid
  FindTeamByCouchUidFunctionArn:
    Description: Find team by couch uid Lambda Function ARN
    Value: !GetAtt FindTeamByCouchUidFunction.Arn
  RegisterRoutineApiUrl:
    Description: API Gateway endpoint URL with path register_routine
    Value: !Sub https://${RoutineApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register_routine
  RegisterRoutineFunctionArn:
    Description: Register routine Lambda Function ARN
    Value: !GetAtt RegisterRoutineFunction.Arn
  FindAllRoutinesByCouchApiUrl:
    Description: API Gateway endpoint URL with path find_all_routines_by_couch
    Value: !Sub https://${RoutineApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/find_all_routines_by_couch
  RegisterFeedbackApiUrl:
    Description: API Gateway endpoint URL with path register_feedback
    Value: !Sub https://${RoutineApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/register_feedback
  RegisterFeedbackFunctionArn:
    Description: Register feedback Lambda Function ARN
    Value: !GetAtt RegisterFeedbackFunction.Arn
  LambdaExecutionRoleArn:
    Description: Lambda Execution Role ARN
    Value: !GetAtt LambdaExecutionRole.Arn